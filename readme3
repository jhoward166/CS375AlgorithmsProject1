README
program2 solves the Longest Common Subsequence problem using a top down recursive algorithm with memoization. The sequences are continually reduced and are compared to one another. As we find the first character that matches in both lists we can build upon that by making the problem a letter more complex each time and comparing that answer to the one that we have from the previous level. This attempts to improve the bad performance of recursion by saving the results of the problem its already solved. As subproblems are solved the are stored in a chart. Before a subsequent subproblem is solved it checks the table to see if that problem already has a solution thereby raising efficiency.

SAMPLE INPUT
./program3 <input1.txt> <input2.txt> <output.txt>

The input is as was defined in the assignment. The first two arguments are the input files containing the strings to be compared, and the third is the output file to which the output data is to be stored.

SAMPLE OUTPUT
The output is as follows:

Memoization LCS Size: 12
Memoization LCS Time: 5 milliseconds

The first line is the size of the longest subsequence and the second is the time it took the algorithm to execute.
